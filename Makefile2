#!/usr/bin/make -f
# Set environment variables

# this makefile follows the below conventions for variables denoting files and directories
# all directory names must end with a terminal '/' character
# file names never end in terminal '/' character


#===================================================

SHELL = /bin/bash

# set this variable to any value to make shared libraries (cleaning existing build files may be necessary)
SHARED =
ifdef SHARED
override SHARED = true
endif

#===================================================
# Compile commands
#===================================================
CXX        = g++
CXXLIBS    =
CXXFLAGS   = -g -O -Wall
INCLUDES   =
ifdef SHARED
RPATH    =
endif
#===================================================
# set cxxflags and cxxflags_exec
ifdef SHARED
ifneq ($(strip $(filter -pie,$(CXXFLAGS))),)
$(error -pie is for executable only do mot specify it for CXXFLAGS)
endif
override cxxflags      := $(filter-out -pic -fpic -Fpic -FPIC -fPIC,$(CXXFLAGS))
ifeq ($(strip $(filter -fpie -Fpie -FPIE -fPIE,$(cxxflags))),)
override cxxflags      += -fpie
endif
override cxxflags_exec := $(cxxflags) -pie
else
override cxxflags      := $(filter-out -pic -fpic -Fpic -FPIC -fPIC -pie -fpie -Fpie -FPIE -fpie,$(CXXFLAGS))
override cxxflags_exec := $(cxxflags)
endif
#===================================================
# Build Directories
#===================================================
srcdir     = src/
buildir    = build/
#===================================================
prog_name = maincxx
#===================================================
# Source and target objects
#===================================================
override CXX1SRCS  = $(wildcard $(srcdir)*.cpp)
override CXX2SRCS  = $(wildcard $(srcdir)*.cxx)
override CXX3SRCS  = $(wildcard $(srcdir)*.cc)
override SRCS   = $(CXX1SRCS) $(CXX2SRCS) $(CXX3SRCS)
override OBJS   = $(patsubst $(srcdir)%.cpp,$(buildir)%.cpp.o,$(CXX1SRCS)) $(patsubst $(srcdir)%.cxx,$(buildir)%.cxx.o,$(CXX2SRCS)) $(patsubst $(srcdir)%.cc,$(buildir)%.cc.o,$(CXX3SRCS))
override MKS    = $(patsubst $(srcdir)%.cpp,$(buildir)%cpp.mk,$(CXX1SRCS)) $(patsubst $(srcdir)%.cxx,$(buildir)%cxx.mk,$(CXX2SRCS)) $(patsubst $(srcdir)%.cc,$(buildir)%cc.mk,$(CXX3SRCS))
#=====================================================

build: $(buildir)$(prog_name)
.PHONY: build

debug:
	@echo    "#-------------------------------------------#"
	@echo -e "\e[35mSource Files     \e[0m: $(SRCS)"
	@echo -e "\e[35mMake Files       \e[0m: $(MKS)"
	@echo -e "\e[35mObject Files     \e[0m: $(OBJS)"
	@echo -e "\e[35mSHARED     \e[0m: $(SHARED)"
	@echo -e "\e[35mCMD Goals  \e[0m: $(MAKECMDGOALS)"
	@echo -e "\e[35mMakeflags  \e[0m: $(MAKEFLAGS)"
	@echo -e "\e[35mClibs      \e[0m: $(CLIBS)"
	@echo -e "\e[35mCFLAGS     \e[0m: $(CFLAGS)"
	@echo -e "\e[35mComputed cflags     \e[0m: $(cflags)"
	@echo -e "\e[35mComputed cflags_exec\e[0m: $(cflags_exec)"
	@echo -e "\e[35mClibs      \e[0m: $(CLIBS)"
	@echo -e "\e[35mTest Var   \e[0m: $(prog_name)"
.PHONY:debug

empty: ;
.PHONY:empty

#=====================================================
ifdef INSTALLMODE
$(buildir)$(prog_name): $(OBJS) empty
else
# if any file in COMPILESTAMP is changed they will cause a recompile
$(buildir)$(prog_name): $(OBJS) $(COMPILESTAMP)
endif
ifdef SHARED
	$(CXX) $(cxxflags_exec) -o $@ $(INCLUDES) -Wl,-rpath="$(RPATH)" $(OBJS) $(CXXLIBS)
else
	$(CXX) $(cxxflags_exec) -o $@ $(INCLUDES) $(OBJS) $(CXXLIBS)
endif

# rule to create cpp build make files
$(buildir)%cpp.mk : $(srcdir)%.cpp
	@mkdir -p $(@D)
	@$(CXX) -M $< -MT $(buildir)$*.cpp.o | awk '{ print $$0 } END { printf("\t$$(CXX) $$(cxxflags) -c -o $$@ $$<")}' > $@
	@echo -e "\e[32mCreating Makefile \"$@\"\e[0m..."

# rule to create cxx build make files
$(buildir)%cxx.mk : $(srcdir)%.cxx
	@mkdir -p $(@D)
	@$(CXX) -M $< -MT $(buildir)$*.cxx.o | awk '{ print $$0 } END { printf("\t$$(CXX) $$(cxxflags) -c -o $$@ $$<")}' > $@
	@echo -e "\e[32mCreating Makefile \"$@\"\e[0m..."
	
# rule to create cc build make files
$(buildir)%cc.mk : $(srcdir)%.cc
	@mkdir -p $(@D)
	@$(CXX) -M $< -MT $(buildir)$*.cc.o | awk '{ print $$0 } END { printf("\t$$(CXX) $$(cxxflags) -c -o $$@ $$<")}' > $@
	@echo -e "\e[32mCreating Makefile \"$@\"\e[0m..."

ifneq ($(strip $(filter build $(buildir)$(prog_name) $(OBJS),$(MAKECMDGOALS))),)
include $(MKS)
else
ifeq ($(MAKECMDGOALS),)
include $(MKS)
endif
endif
#=====================================================

clean:
	rm -f $(buildir)
.PHONY:clean
